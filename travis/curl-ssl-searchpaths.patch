diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3aaeb34..0e2bb2e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -632,8 +632,13 @@ set(CURL_CA_FALLBACK OFF CACHE BOOL
     "Set ON to use built-in CA store of TLS backend. Defaults to OFF")
 set(CURL_CA_PATH "auto" CACHE STRING
     "Location of default CA path. Set 'none' to disable or 'auto' for auto-detection. Defaults to 'auto'.")
+set(CURL_CA_BUNDLE_SEARCHPATHS CACHE STRING
+    "List of paths to check for CA bundles during runtime. Defaults to ''. Overrides other CA settings if set. Must not contain spaces.")
 
-if("${CURL_CA_BUNDLE}" STREQUAL "")
+if(NOT "${CURL_CA_BUNDLE_SEARCHPATHS}" STREQUAL "")
+    message(STATUS "CA bundle search paths: ${CURL_CA_BUNDLE_SEARCHPATHS}")
+    add_definitions("-DCURL_CA_BUNDLE_SEARCHPATHS=\"${CURL_CA_BUNDLE_SEARCHPATHS}\"")
+elseif("${CURL_CA_BUNDLE}" STREQUAL "")
     message(FATAL_ERROR "Invalid value of CURL_CA_BUNDLE. Use 'none', 'auto' or file path.")
 elseif("${CURL_CA_BUNDLE}" STREQUAL "none")
     unset(CURL_CA_BUNDLE CACHE)
diff --git a/lib/url.c b/lib/url.c
index 5a11e42..41e08c0 100644
--- a/lib/url.c
+++ b/lib/url.c
@@ -585,15 +585,41 @@ CURLcode Curl_init_userdefined(struct UserDefined *set)
   set->socks5_gssapi_nec = FALSE;
 #endif
 
+#define SET_CA_BUNDLE(path) { \
+                              setstropt(&set->str[STRING_SSL_CAFILE_ORIG], path); \
+                              if(result) \
+                                return result; \
+                              result = setstropt(&set->str[STRING_SSL_CAFILE_PROXY], path); \
+                              if(result) \
+                                return result; \
+                            }
+
+#if defined(CURL_CA_BUNDLE_SEARCHPATHS)
+  {
+    char delim[2];
+    char *searchpaths;
+    char *path;
+    strcpy(delim, ":");
+    searchpaths = strdup(CURL_CA_BUNDLE_SEARCHPATHS);
+    if (getenv("CURLOPT_VERBOSE")) fprintf(stderr, "*** testing CA certificate search paths: %s ***\n", searchpaths);
+    path = strtok(searchpaths, delim);
+    while (path != NULL) {
+      if (getenv("CURLOPT_VERBOSE")) fprintf(stderr, "*** checking path: %s ***\n", path);
+      if (access(path, F_OK) != -1) {
+        FILE *f = fopen(path, "r");
+        fseek(f, 0, SEEK_END);
+        if (ftell(f) > 0) {
+          if (getenv("CURLOPT_VERBOSE")) fprintf(stderr, "*** using path: %s ***\n", path);
+          SET_CA_BUNDLE(path);
+          break;
+        }
+      }
+      path = strtok(NULL, delim);
+    }
+  }
+#elif defined(CURL_CA_BUNDLE)
   /* This is our preferred CA cert bundle/path since install time */
-#if defined(CURL_CA_BUNDLE)
-  result = setstropt(&set->str[STRING_SSL_CAFILE_ORIG], CURL_CA_BUNDLE);
-  if(result)
-    return result;
-
-  result = setstropt(&set->str[STRING_SSL_CAFILE_PROXY], CURL_CA_BUNDLE);
-  if(result)
-    return result;
+  SET_CA_BUNDLE(CURL_CA_BUNDLE);
 #endif
 #if defined(CURL_CA_PATH)
   result = setstropt(&set->str[STRING_SSL_CAPATH_ORIG], CURL_CA_PATH);

